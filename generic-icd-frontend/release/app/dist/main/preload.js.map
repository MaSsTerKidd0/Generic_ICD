{"version":3,"file":"preload.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACH,oBAAXC,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeJ,EAASC,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeJ,EAAS,aAAc,CAAEK,OAAO,GAAO,G,YCL9D,MAAM,EAA+BC,QAAQ,YCkDvCC,EAAmC,CACvCC,YAAa,CACXC,YAAYC,KAAsBC,GAChC,EAAAH,YAAYI,KAAKF,EAASC,EAC5B,EAEAE,GAAI,CACFH,EACAI,KAKA,EAAAN,YAAYK,GAAGH,EAASI,EAAK,EAG/BC,IAAK,CACHL,EACAI,KAKA,EAAAN,YAAYO,IAAIL,EAASI,EAAK,EAGhCE,mBAA2DN,IACzD,EAAAF,YAAYQ,mBAAmBN,EAAQ,EAGzCO,cACEP,GAEO,EAAAF,YAAYS,cAAcP,GAGnCQ,KAAM,CACJR,EACAI,KAKA,EAAAN,YAAYU,KAAKR,EAASI,EAAK,EAGjCK,OAAQC,MAAOV,KAAYC,IAClB,EAAAH,YAAYW,OAAOT,KAAYC,KAK5C,EAAAU,cAAcC,kBAAkB,WAAYf,G","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/make namespace object","webpack:///external node-commonjs \"electron\"","webpack:///./src/main/preload.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","/* eslint-disable camelcase */\n// Disable no-unused-vars, broken for spread args\n/* eslint no-unused-vars: off */\nimport { IpcRendererEvent, contextBridge, ipcRenderer } from 'electron';\nimport { IPCMethods } from 'shared/IPC/types/clientToServer';\nimport { IPC_PushNotification } from 'shared/IPC/types/serverToClient';\n\ntype Channels = keyof IPCMethods;\n\nexport interface ElectronHandler {\n  ipcRenderer: {\n    sendMessage(channel: Channels, ...args: unknown[]): void;\n\n    on: <T extends keyof IPC_PushNotification>(\n      channel: T,\n      func: (\n        _event: IpcRendererEvent,\n        args: IPC_PushNotification[T]['payload']\n      ) => void\n    ) => void;\n\n    off: <T extends keyof IPC_PushNotification>(\n      channel: T,\n      func: (\n        _event: IpcRendererEvent,\n        args: IPC_PushNotification[T]['payload']\n      ) => void\n    ) => void;\n\n    removeAllListeners: <T extends keyof IPC_PushNotification>(\n      channel: T\n    ) => void;\n\n    once: <T extends keyof IPC_PushNotification>(\n      channel: T,\n      func: (\n        _event: IpcRendererEvent,\n        args: IPC_PushNotification[T]['payload']\n      ) => void\n    ) => void;\n\n    invoke: <T extends Channels>(\n      channel: T,\n      args: IPCMethods[T]['request']\n    ) => Promise<IPCMethods[T]['response']>;\n\n    listenerCount: <T extends keyof IPC_PushNotification>(channel: T) => number;\n  };\n}\n\nconst electronHandler: ElectronHandler = {\n  ipcRenderer: {\n    sendMessage(channel: Channels, ...args: unknown[]) {\n      ipcRenderer.send(channel, args);\n    },\n\n    on: <T extends keyof IPC_PushNotification>(\n      channel: T,\n      func: (\n        _event: IpcRendererEvent,\n        args: IPC_PushNotification[T]['payload']\n      ) => void\n    ) => {\n      ipcRenderer.on(channel, func);\n    },\n\n    off: <T extends keyof IPC_PushNotification>(\n      channel: T,\n      func: (\n        _event: IpcRendererEvent,\n        args: IPC_PushNotification[T]['payload']\n      ) => void\n    ) => {\n      ipcRenderer.off(channel, func);\n    },\n\n    removeAllListeners: <T extends keyof IPC_PushNotification>(channel: T) => {\n      ipcRenderer.removeAllListeners(channel);\n    },\n\n    listenerCount: <T extends keyof IPC_PushNotification>(\n      channel: T\n    ): number => {\n      return ipcRenderer.listenerCount(channel);\n    },\n\n    once: <T extends keyof IPC_PushNotification>(\n      channel: T,\n      func: (\n        _event: IpcRendererEvent,\n        args: IPC_PushNotification[T]['payload']\n      ) => void\n    ) => {\n      ipcRenderer.once(channel, func);\n    },\n\n    invoke: async (channel, ...args) => {\n      return ipcRenderer.invoke(channel, ...args);\n    },\n  },\n};\n\ncontextBridge.exposeInMainWorld('electron', electronHandler);\n"],"names":["__webpack_require__","exports","Symbol","toStringTag","Object","defineProperty","value","require","electronHandler","ipcRenderer","sendMessage","channel","args","send","on","func","off","removeAllListeners","listenerCount","once","invoke","async","contextBridge","exposeInMainWorld"],"sourceRoot":""}